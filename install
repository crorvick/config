#!/bin/env python

from __future__ import print_function

import sys, os

def install_path(path):
    with open(path) as f:
        l = f.readline()
        if not l:
            return None
        i = l.find("~/")
        return l[i:].strip() if i >= 0 else None;

base_dir = os.path.dirname(sys.argv[0])
conf_dirs = [ 'default' ] + sys.argv[1:]
install_dir = os.path.join(base_dir, '.installed')

if not os.path.exists(install_dir):
    print('Creating install directory: {}'.format(install_dir), file=sys.stderr)
    os.mkdir(install_dir)

configs = {}

for d in conf_dirs:
    for root, dirs, files in os.walk(os.path.join(base_dir, d)):
        for f in files:
            src = os.path.join(root, f)
            dst = install_path(src)
            configs[dst] = src

for dst, src in configs.items():

    file_name = os.path.basename(src)
    installed_path = os.path.join(install_dir, file_name)

    try:
        with open(src) as fin, open(installed_path, 'w') as fout:
            while True:
                line = fin.readline()
                if not line:
                    break
                fout.write(line)
    except (OSError, IOError) as e:
        msg = 'cannot install file: {} ({})'.format(file_name, e.strerror)
        print('error: {}'.format(msg), file=sys.stderr)

    expanded_dst = os.path.expanduser(dst)
    if not os.path.lexists(expanded_dst):
        try:
            dst_dir = os.path.dirname(expanded_dst)
            if not os.path.exists(dst_dir):
                os.makedirs(dst_dir)
            installed_path = os.path.relpath(installed_path, dst_dir)
            os.symlink(installed_path, expanded_dst)
        except (OSError, IOError) as e:
            msg = 'cannot link {} => {} ({})'.format(src, dst, e.strerror)
            print('error: {}'.format(msg), file=sys.stderr)
    elif not os.path.islink(expanded_dst):
        msg = 'leaving unmanaged config {}'.format(dst)
        print('warning: {}'.format(msg), file=sys.stderr)
