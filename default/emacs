; ~/.emacs.d/init.el

(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)

(setq column-number-mode t)

(menu-bar-mode -1)
(tool-bar-mode -1)

;;
;; org-mode
;;

(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c b") 'org-iswitchb)

;;
;; cc-mode
;;

(defun my-recompile-or-compile ()
  "Call recompile if defined, otherwise compile"
  (interactive)
  (if (fboundp 'recompile)
      (call-interactively 'recompile)
    (call-interactively 'compile)))

(add-hook 'c-initialization-hook
	  '(lambda ()
	     (setq c-default-style "linux")
	     (define-key c-mode-base-map (kbd "<f5>")    'my-recompile-or-compile)
	     (define-key c-mode-base-map (kbd "<S-f5>")  'compile)
	     (define-key c-mode-base-map (kbd "<f6>")    'gdb)))

(add-hook 'c-mode-common-hook
	  '(lambda ()
	     (c-toggle-auto-state 1)))

(setq compilation-scroll-output 'first-error
      compilation-auto-jump-to-first-error t)

;;
;; load site-specific config
;;

(let ((site-init (expand-file-name "~/.emacs.d/site-init.el")))
  (if (file-exists-p site-init)
      (load-file site-init)))
